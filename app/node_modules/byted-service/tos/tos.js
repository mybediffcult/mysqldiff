/**
 * A library for publish resource.
 * 
 * @author <luowen@bytedance.com>
 */

 'use strict';
const assert = require('assert');
const http = require('http');
const md5 = require('md5');

const Consul = require('../consul/consul');
const { ServiceWatcher } = Consul;

const DefaultConfig={
    psm: 'toutiao.tos.tosapi',
    bucket:'tostest',
    accessKey:'BG8DFYMLM6U44P9KX755',
    cdns:[
        "sf1-hscdn-tos.pstatp.com",
        "sf3-hscdn-tos.pstatp.com",
        "sf6-hscdn-tos.pstatp.com",
        "lf1-hscdn-tos.pstatp.com",
        "lf3-hscdn-tos.pstatp.com",
        "lf6-hscdn-tos.pstatp.com",
    ],
    consul:{
        host: '10.3.23.41',
        port: 2280
    }
}


class Tos {
    constructor(options){
        var options = options || {};
        assert(
           options.host == undefined || typeof options.host == 'string',
            `Tos invalid 'host': ${options.host}, a host is needed`
        );
        assert(
            options.port == undefined || typeof options.port == 'number',
            `Tos invalid 'port': ${options.port}, a port is needed`
        );
        assert(
            options.cdns == undefined || Array.isArray(options.cdns),
            `Tos invalid 'cdns': ${options.cdns}, cdns must be a array`
        );

        var Config = Object.assign(DefaultConfig, options);
        //TOS服务psm
        this.psm = Config.psm;
        //TOS服务bucket
        this.bucket = Config.bucket;
        //TOS服务accessKey
        this.accessKey = Config.accessKey;
        //TOS服务CDN列表
        this.cdns = Config.cdns;
        //TOS的consul服务地址
        this.consul = Config.consul;
        this.consulService = new Consul(this.consul);
        //计数器
        this.count = 0;
        // this.kite = Config.kite || null;
        this.retry = Config.retry || 5;
        this.logFile = Config.logFile || __dirname + '/session.log';
        this.host = Config.host || null;
        this.port = Config.port || null;
        this.printAddress = Config.printAddress || false;

        this._initServiceWatcher();
    }

    // _getKiteJS(){
    //     if(this.kite) return this.kite;
    //     this.kite = new kite.Client({
    //         service: this.psm,
    //         searchHostType: 'CONSUL',
    //         protocol: 'HTTP',
    //         consul: this.consul,
    //         retry: this.retry,
    //         log: {
    //             logFile: this.logFile
    //         }
    //     });
    //     return this.kite;
    // }

    _initServiceWatcher() {
        let watcher = new ServiceWatcher({
            interval: 5000, // 轮询时间间隔，单位ms，默认5000
            consul: this.consul
        });
        this.psm && watcher.addService(this.psm, { env: 'prod', cluster: 'default' });
        watcher.watch();
        watcher.on('update', (service, addresses) => {
            this._initAddress(addresses);
        });
    }

    _initAddress(addresses) {
        let address = Array.isArray(addresses) ? Math.floor(addresses.length * Math.random()) : addresses;
        this.host = address.host;
        this.port = address.port;
        if(this.printAddress){
            console.log(this.host,this.port);
        }
    }

    async _getAddress(){
        let address = await this.consulService.random(this.psm, {
            env: 'prod',
            cluster: 'default'
        });

        if (!address) {
            throw new Error(`consul Tos addresses failed.`);
            return 'fail';
        }

        this._initAddress(address);
        return 'success';
    }

    _getDynamicCDN(){
        const cdnsLenth = this.cdns.length;
        const rand = this.count++ % cdnsLenth;
        return this.cdns[rand];
    }

    //上传文件,如果未指定名称则使用文件的md5
    _upload(buffer, name){
        if(name == undefined)
            var fileKey = md5(buffer);
        else{
            assert(typeof name == 'string',`name: ${name} must be a string`);
            var fileKey = name;
        } 
            
        const options = {
            method: 'PUT',
            host: this.host,
            port: this.port,
            path: `/${this.bucket}/${fileKey}`,
            headers: {
                'Content-Length': buffer.length,
                'X-Tos-Access': this.accessKey
            }
        };

        return new Promise((resolve, reject) => {
            const request = http.request(options, res => {
                let result = '';
                res.on('data', (data) => {
                    result += data;
                }).on('end', () => {
                    if (res.statusCode !== 200) {
                        reject(new Error(`can't upload file to TOS, status code: ${res.statusCode}`));
                    } else {
                        resolve({
                            "domain": this._getDynamicCDN(),
                            "path":"/obj",
                            "tosKey": `/${this.bucket}/${fileKey}`
                        });
                    }
                });
            });
            request.on('error', (e) => {
                reject(e);
            });
            request.write(buffer);
            request.end();
        });
    }

    //删除该bucket下指定的key值的资源文件
    _delete(name){
        assert( typeof name == 'string',`Tos Delete parmas: ${name} must be a string`);
        const options = {
            method: 'DELETE',
            host: this.host,
            port: this.port,
            path: `/${this.bucket}/${name}`,
            headers: {
                'X-Tos-Access': this.accessKey
            }
        };

        return new Promise( (resolve,reject) => {
            const request = http.request( options , res =>{
                let result = '';
                res.on('data', (data) => {
                    result += data;
                });
                res.on('end', () => {
                    if (res.statusCode !== 204) {
                        reject(new Error(`can't delete files ${name} on Tos, status code: ${res.statusCode}`));
                    } else {
                        resolve({
                            "name": name,
                            "state": 0
                        });
                    }
                });
            });
            request.on('error', (e) => {
                reject(e);
            });
            request.end();
        })
    }

    //获取key拥有特定前缀的资源列表
    _getPrefixList(prefix,length){
        assert( typeof prefix == 'string',`prefix: ${prefix} must be a string`);
        assert( typeof length == 'number' || typeof length == 'undefined', `length: ${length} must be a number lower than 1000 `);

        const maxKey = length || 1000;
        const options = {
            method: 'GET',
            host: this.host,
            port: this.port,
            path: `/${this.bucket}?prefix=${prefix}&max-keys=${maxKey}`,
            headers: {
                'X-Tos-Access': this.accessKey
            }
        };

        return new Promise( (resolve,reject) => {
            const request = http.request( options , res =>{
                let result = '';
                res.on('data', (data) => {
                    result += data;
                }).on('end', () => {
                    if (res.statusCode !== 200) {
                        reject(new Error(`can't get prefix ${prefix} list: ${res.statusCode}`));
                    } else {
                        var obj = JSON.parse(result);
                        resolve({
                            "result": obj.payload,
                            "status": 0
                        });
                    }
                });
            });
            request.on('error', (e) => {
                reject(e);
            });
            request.end();
        })

    }

    upload(buffer, name) {
        if(this.host == null || this.port == null){
            return this._getAddress().then((res) => {
                return this._upload(buffer, name);
            })
        }else
            return this._upload(buffer, name).catch((e) => {
                if(e.message.match(/ECONNREFUSED/)){
                    this.host = null;
                    this.port = null;
                }
                throw e;
            });
    }

    delete(key){
        if(this.host == null || this.port == null){
            return this._getAddress().then((res) => {
                return this._delete(key);
            })
        }else
            return this._delete(key).catch((e) => {
                if(e.message.match(/ECONNREFUSED/)){
                    this.host = null;
                    this.port = null;
                }
                throw e;
            });
    }

    getPrefixList(prefix,length){
        if(this.host == null || this.port == null){
            return this._getAddress().then((res) => {
                return this._getPrefixList(prefix,length);
            })
        }else
            return this._getPrefixList(prefix,length).catch((e) => {
                if(e.message.match(/ECONNREFUSED/)){
                    this.host = null;
                    this.port = null;
                }
                throw e;
            });
    }
}

module.exports = Tos;