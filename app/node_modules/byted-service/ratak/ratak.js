/**
 * A library for emitting and collecting metrics.
 * 
 * @author Yaphet Ye <yeyuanfeng@bytedance.com>
 */

'use strict';
const assert = require('assert');
const request = require('request-promise');
const decamelizeKeysDeep = require('decamelize-keys-deep');

const BASE_URL = 'https://ee.byted.org/ratak';

class Ratak {
    constructor(appid, secret) {
        assert(
            typeof appid === 'string' || typeof appid === 'number',
            `invalid 'appid': ${appid}, a string or number is expected`
        );
        assert(
            typeof secret === 'string',
            `invalid 'secret': ${secret}, a string is expected`
        );
        this.appid = appid;
        this.secret = secret;
    }

    async _request(url, options = { method: 'GET' }) {
        const auth = new Buffer(`${this.appid}:${this.secret}`).toString('base64');
        options = Object.assign({}, options, {
            baseUrl: BASE_URL,
            url,            
            headers: {
                Authorization: `Basic ${auth}`,
            },
            json: true
        });     
        return request(options);
    }

    /**
     * 查询指定部门的信息
     * 
     * @param {String} id 
     */
    async queryDepartment(id) {
        return this._request(`/departments/${id}/`);
    }

    /**
     * 查询指定部门的子部门
     * 
     * @param {String} id 
     */
    async querySubDepartments(id) {
        return this._request(`/departments/${id }/departments/`);
    }

    /**
     * DingTalk - 使用JSAPI Ticket为指定的URL签名
     * 
     * @param {String} url 需要签名的URL
     * @param {Number} corpEnum 分公司枚举，此为 ratak 系统内定义的枚举，如：0，1，2
     */
    async signUrl(url, corpEnum) {
        return this._request(`/dingtalk/jsapi_signature/`, {
            method: 'POST',
            body: {
                url,
                corpEnum
            }
        });
    }

    /**
     * DingTalk - 发送一条企业消息给指定员工
     * 
     * @param {Array[String]} employeeKeys 员工邮箱前缀列表
     * @param {Number} agentId 发消息的微应用ID，值为：22750773
     * @param {String} type 消息的类型：text，image，voice，file，link，OA, markdown
     * @param {Object} content 消息体，请参考钉钉文档， https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.0WTkzI&treeId=172&articleId=104972&docType=1
     */
    async sendDingTalkMessage(employeeKeys, agentId, type, content) {
        return this._request(`/dingtalk/messages/`, {
            method: 'POST',
            body: {
                employee_keys: employeeKeys,
                agent_id: agentId,
                type,
                content
            }
        });
    }

    /**
     * DingTalk - 发送一条群会话消息
     * 
     * @param {String} channelId Channel ID，请到『配置中心』获取
     * @param {String} type 消息的类型：text，image，voice，file，link，OA, markdown
     * @param {Object} content 消息体，请参考钉钉文档， https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.0WTkzI&treeId=172&articleId=104972&docType=1
     */
    async sendDingTalkChannelMessage(channelId, type, content) {
        return this._request(`/dingtalk/channels/${channelId}/messages/`, {
            method: 'POST',
            body: {
                channel_id: channelId,
                type,
                content
            }
        });
    }

    /**
     * DingTalk - 群会话增加成员
     * 
     * @param {String} chatId 群会话ID，请到『配置中心』获取
     * @param {Array[String]} employeeKeys 员工邮箱前缀列表
     */
    async addDingTalkChannelMembers(chatId, employeeKeys) {
        return this._request(`/dingtalk/chats/${chatId}/employees/`, {
            method: 'PUT',
            body: {
                employee_keys: employeeKeys
            }
        });
    }

    /**
     * 发送一条消息给指定员工的邮箱（该接口是异步的,即调用后立即返回）
     * 
     * @param {Array[String]} recipients 员工的邮箱前缀列表
     * @param {*} subject 邮件主题
     * @param {*} content 邮件内容
     */
    async sendEmail(recipients, subject, content) {
        return this._request(`/emails/`, {
            method: 'POST',
            body: {
                recipients,
                subject,
                content
            }
        });
    }

    /**
     * 查询指定员工信息
     * 
     * @param {String} employeeKey 员工邮箱前缀
     */
    async queryEmployee(employeeKey) {
        return this._request(`/employees/${employeeKey}/`);
    }

    /**
     * 查询员工的所在组
     * 
     * @param {String} employeeKey 员工邮箱前缀 
     */
    async queryEmployeeGroups(employeeKey) {
        return this._request(`/employees/${employeeKey}/groups/`);
    }

    /**
     * OAuth - 通过 authorization code 获取免登的员工邮箱前缀
     * 
     * @param {String} code 
     */
    async queryEmployeeKeyByCode(code) {
        return this._request(`/oauth/access_tokens/`, { qs: { code } });
    }

    /**
     * Permission - 修改权限信息
     * 
     * @param {String} resourceKey 资源标识
     * @param {String} action 权限标识
     * @param {String} name 权限名称，可选     
     * @param {Boolean} status 权限是否启用，可选
     */
    async updatePermission(resourceKey, action, name, status) {
        return this._request(`/resources/${resourceKey}/permissions/${action}/`, { method: 'PUT', body: { name, status } });
    }

    /**
     * Permission - 批量导入权限
     * 
     * @param {String} resourceKey 资源标识
     * @param {Array[String]} actions 权限标识列表
     * @param {Array[Number]} groups 分组标识列表，groups和employees二选一
     * @param {Array[String]} employees 员工的邮箱前缀列表，groups和employees二选一
     */
    async importPermissions(resourceKey, actions, groups = [], employees = []) {
        return this._request(`/permissions/relationships/`, { 
            method: 'POST', 
            body: { 
                resource_key: resourceKey, 
                actions, 
                group_ids: groups.map(parseInt), 
                employee_keys: employees 
            }
        });
    }

    /**
     * Permission - 查询指定员工拥有的所有权限
     * 
     * @param {String} employeeKey 员工邮箱前缀
     * @param {Number} employeeType 0 或 1，默认为 0。如果指定为 0，则返回该员工所拥有的所有权限；如果指定为 1，则对实习生只返回临时权限，对全职员工返回所有权限
     */
    async queryEmployeePermissions(employeeKey, employeeType = 0) {
        return this._request(`/employees/${employeeKey}/permissions/`, { qs: { employee_type: employeeType } });
    }

    /**
     * Permission - 查询指定组的所有权限
     * 
     * @param {Array[String]} groups 分组标识列表
     */
    async queryGroupsPermissions(groups = []) {
        return this._request(`/groups/${groups.join(',')}/permissions/`);        
    }

    /**
     * Permission - 注册权限
     * 
     * @param {String} creatorKey 创建者邮箱前缀
     * @param {*} resourceKey 资源标识
     * @param {*} action 权限标识
     * @param {*} name 权限名称
     */
    async registerPermission(creatorKey, resourceKey, action, name) {
        return this._request(`/permissions/`, { 
            method: 'POST', 
            body: {
                name,
                action,
                creator_key: creatorKey,
                resource_key: resourceKey
            }
        });        
    }

    /**
     * Permission - 通过 resource keys 获取员工拥有的相应资源的权限
     * 
     * @param {Array[String]} resourceKeys 资源标识列表
     * @param {String} employeeKey 员工邮箱前缀
     * @param {Number} employeeType 0 或 1，默认为 0。如果指定为 0，则返回该员工所拥有该资源的权限；如果指定为 1，则对实习生只返回临时权限，对全职员工返回所有权限
     */
    async queryEmployeePermissionsByResourceKeys(resourceKeys, employeeKey, employeeType = 0) {
        return this._request(`/employees/${employeeKey}/resources/${resourceKeys.join(',')}/`, { qs: { employee_type: employeeType } });                
    }

    /**
     * Resource - 修改资源信息
     * 
     * @param {String} key 资源标识
     * @param {Object} resource 资源信息     
     */
    async updateResource(resourceKey, resource = {}) {
        resource = decamelizeKeysDeep(resource);
        return this._request(`/resources/${resourceKey}/`, {
            method: 'PUT',
            body: resource
        });                
    }

    /**
     * @deprecated
     * Resource - 查询拥有指定资源权限的员工和组
     * 
     * @param {String} resourceKey 资源标识
     */
    async queryResourcePermissions(resourceKey) {
        return this._request(`/resources/${resourceKey}/permissions/`);                        
    }

    /**
     * Resource - 查询拥有指定资源权限的员工
     * 
     * @param {String} resourceKey 
     */
    async queryResourceEmployees(resourceKey) {
        return this._request(`/resources/${resourceKey}/employees/`);                        
    }

    /**
     * Resource - 查询资源信息
     * 
     * @param {String} resourceKey 资源标识
     */
    async queryResource(resourceKey) {
        return this._request(`/resources/${resourceKey}/`);                        
    }

    /**
     * Resource - 注册资源
     * 
     * @param {Object} resource 资源信息
     */
    async registerResource(resource) {
        resource = decamelizeKeysDeep(resource);
        return this._request(`/resources/`, {
            method: 'POST',
            body: resource
        });                        
    }

    /**
     * voice - 第三方语音警报
     * 
     * @param {String} employeeKey 员工邮箱前缀
     * @param {Number} templateId 文字模板 ID，1007 为 "项目 {project} 有报警，请查看钉钉"。在此处设置 http://bss.ucpaas.com/safetyCalls/admin/index
     * @param {Object} templateArgs 文字模板参数。1007 示例：{"project": "lark"}
     * @param {String} state 用户自定义内容(待生效)
     * @param {String} callbackUrl 回调地址, 回调相关信息见 wiki https://wiki.bytedance.com/pages/viewpage.action?pageId=63236970
     * @param {Number} times 失败重试次数, 最多为5, 目前一个号码一天最多被叫20次
     */
    async sendVoiceMessage(employeeKey, templateId, templateArgs, state, callbackUrl, times) {
        return this._request(`/voice/messages/`, {
            method: 'POST',
            body: {
                employee_key: employeeKey,
                template_id: templateId,
                kwargs: templateArgs,
                state,
                callback_url: callbackUrl,
                times
            }
        });                        
    }
}

module.exports = Ratak;