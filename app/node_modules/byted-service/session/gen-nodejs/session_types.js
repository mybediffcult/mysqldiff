//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');


var ttypes = module.exports = {};
ttypes.ERR = {
  'SUCCESS' : 0,
  'KEY_TOO_LONG' : 132096,
  'GET_WRITE_REDIS' : 132097,
  'GET_READ_REDIS' : 132098,
  'GET_DB' : 132099,
  'JSON_DECODE' : 132100,
  'SAVE_SESSION' : 132101,
  'READ_ALL_CACHE_BACKENDS' : 132102,
  'JSON_ENCODE' : 132103,
  'DEL_SESSION' : 132104,
  'SESSION_KEY_NOT_EXISTS' : 132105,
  'DUPLICATE_ENTRY' : 132106,
  'WRITE_DB' : 132107,
  'WRITE_MASTER_DC_REDIS' : 132108,
  'WRITE_SLAVE_DC_NSQ' : 132109,
  'SEND_TO_NSQ' : 132110,
  'GET_WRITE_NSQ' : 132111
};
var AddRequest = module.exports.AddRequest = function(args) {
  this.SessionKey = '';
  this.SessionData = '{}';
  this.Ttl = 10;
  this.Base = null;
  if (args) {
    if (args.SessionKey !== undefined && args.SessionKey !== null) {
      this.SessionKey = args.SessionKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field SessionKey is unset!');
    }
    if (args.SessionData !== undefined && args.SessionData !== null) {
      this.SessionData = args.SessionData;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field SessionData is unset!');
    }
    if (args.Ttl !== undefined && args.Ttl !== null) {
      this.Ttl = args.Ttl;
    }
    if (args.Base !== undefined && args.Base !== null) {
      this.Base = new base_ttypes.Base(args.Base);
    }
  }
};
AddRequest.prototype = {};
AddRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.SessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.SessionData = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.Ttl = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new base_ttypes.Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddRequest.prototype.write = function(output) {
  output.writeStructBegin('AddRequest');
  if (this.SessionKey !== null && this.SessionKey !== undefined) {
    output.writeFieldBegin('SessionKey', Thrift.Type.STRING, 1);
    output.writeString(this.SessionKey);
    output.writeFieldEnd();
  }
  if (this.SessionData !== null && this.SessionData !== undefined) {
    output.writeFieldBegin('SessionData', Thrift.Type.STRING, 2);
    output.writeString(this.SessionData);
    output.writeFieldEnd();
  }
  if (this.Ttl !== null && this.Ttl !== undefined) {
    output.writeFieldBegin('Ttl', Thrift.Type.I32, 3);
    output.writeI32(this.Ttl);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddResponse = module.exports.AddResponse = function(args) {
  this.SessionKey = '';
  this.BaseResp = null;
  if (args) {
    if (args.SessionKey !== undefined && args.SessionKey !== null) {
      this.SessionKey = args.SessionKey;
    }
    if (args.BaseResp !== undefined && args.BaseResp !== null) {
      this.BaseResp = new base_ttypes.BaseResp(args.BaseResp);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
AddResponse.prototype = {};
AddResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.SessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new base_ttypes.BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddResponse.prototype.write = function(output) {
  output.writeStructBegin('AddResponse');
  if (this.SessionKey !== null && this.SessionKey !== undefined) {
    output.writeFieldBegin('SessionKey', Thrift.Type.STRING, 1);
    output.writeString(this.SessionKey);
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateRequest = module.exports.UpdateRequest = function(args) {
  this.SessionKey = '';
  this.SessionData = '{}';
  this.Ttl = 10;
  this.Base = null;
  if (args) {
    if (args.SessionKey !== undefined && args.SessionKey !== null) {
      this.SessionKey = args.SessionKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field SessionKey is unset!');
    }
    if (args.SessionData !== undefined && args.SessionData !== null) {
      this.SessionData = args.SessionData;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field SessionData is unset!');
    }
    if (args.Ttl !== undefined && args.Ttl !== null) {
      this.Ttl = args.Ttl;
    }
    if (args.Base !== undefined && args.Base !== null) {
      this.Base = new base_ttypes.Base(args.Base);
    }
  }
};
UpdateRequest.prototype = {};
UpdateRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.SessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.SessionData = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.Ttl = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new base_ttypes.Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateRequest');
  if (this.SessionKey !== null && this.SessionKey !== undefined) {
    output.writeFieldBegin('SessionKey', Thrift.Type.STRING, 1);
    output.writeString(this.SessionKey);
    output.writeFieldEnd();
  }
  if (this.SessionData !== null && this.SessionData !== undefined) {
    output.writeFieldBegin('SessionData', Thrift.Type.STRING, 2);
    output.writeString(this.SessionData);
    output.writeFieldEnd();
  }
  if (this.Ttl !== null && this.Ttl !== undefined) {
    output.writeFieldBegin('Ttl', Thrift.Type.I32, 3);
    output.writeI32(this.Ttl);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateResponse = module.exports.UpdateResponse = function(args) {
  this.SessionKey = '';
  this.BaseResp = null;
  if (args) {
    if (args.SessionKey !== undefined && args.SessionKey !== null) {
      this.SessionKey = args.SessionKey;
    }
    if (args.BaseResp !== undefined && args.BaseResp !== null) {
      this.BaseResp = new base_ttypes.BaseResp(args.BaseResp);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
UpdateResponse.prototype = {};
UpdateResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.SessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new base_ttypes.BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateResponse');
  if (this.SessionKey !== null && this.SessionKey !== undefined) {
    output.writeFieldBegin('SessionKey', Thrift.Type.STRING, 1);
    output.writeString(this.SessionKey);
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetRequest = module.exports.GetRequest = function(args) {
  this.SessionKey = '';
  this.Base = null;
  if (args) {
    if (args.SessionKey !== undefined && args.SessionKey !== null) {
      this.SessionKey = args.SessionKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field SessionKey is unset!');
    }
    if (args.Base !== undefined && args.Base !== null) {
      this.Base = new base_ttypes.Base(args.Base);
    }
  }
};
GetRequest.prototype = {};
GetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.SessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new base_ttypes.Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRequest');
  if (this.SessionKey !== null && this.SessionKey !== undefined) {
    output.writeFieldBegin('SessionKey', Thrift.Type.STRING, 1);
    output.writeString(this.SessionKey);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetResponse = module.exports.GetResponse = function(args) {
  this.SessionData = '{}';
  this.BaseResp = null;
  if (args) {
    if (args.SessionData !== undefined && args.SessionData !== null) {
      this.SessionData = args.SessionData;
    }
    if (args.BaseResp !== undefined && args.BaseResp !== null) {
      this.BaseResp = new base_ttypes.BaseResp(args.BaseResp);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
GetResponse.prototype = {};
GetResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.SessionData = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new base_ttypes.BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetResponse.prototype.write = function(output) {
  output.writeStructBegin('GetResponse');
  if (this.SessionData !== null && this.SessionData !== undefined) {
    output.writeFieldBegin('SessionData', Thrift.Type.STRING, 1);
    output.writeString(this.SessionData);
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DelRequest = module.exports.DelRequest = function(args) {
  this.SessionKey = '';
  this.Base = null;
  if (args) {
    if (args.SessionKey !== undefined && args.SessionKey !== null) {
      this.SessionKey = args.SessionKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field SessionKey is unset!');
    }
    if (args.Base !== undefined && args.Base !== null) {
      this.Base = new base_ttypes.Base(args.Base);
    }
  }
};
DelRequest.prototype = {};
DelRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.SessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new base_ttypes.Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelRequest.prototype.write = function(output) {
  output.writeStructBegin('DelRequest');
  if (this.SessionKey !== null && this.SessionKey !== undefined) {
    output.writeFieldBegin('SessionKey', Thrift.Type.STRING, 1);
    output.writeString(this.SessionKey);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DelResponse = module.exports.DelResponse = function(args) {
  this.SessionKey = '';
  this.BaseResp = null;
  if (args) {
    if (args.SessionKey !== undefined && args.SessionKey !== null) {
      this.SessionKey = args.SessionKey;
    }
    if (args.BaseResp !== undefined && args.BaseResp !== null) {
      this.BaseResp = new base_ttypes.BaseResp(args.BaseResp);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
DelResponse.prototype = {};
DelResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.SessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new base_ttypes.BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelResponse.prototype.write = function(output) {
  output.writeStructBegin('DelResponse');
  if (this.SessionKey !== null && this.SessionKey !== undefined) {
    output.writeFieldBegin('SessionKey', Thrift.Type.STRING, 1);
    output.writeString(this.SessionKey);
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

