const { EventEmitter } = require('events');
const request = require('request-promise');
const deepEqual = require('deep-equal');

class Consul {
    constructor(options = {}) {
        this.host = options.host || '127.0.0.1';
        this.port = options.port || 2280;
    }

    /**
     * 获取查询结果的第一个地址
     * 
     * @param {String} service 服务PSM
     * @param {Object} options 查询选项 
     */
    async first(service, options) {
        const addresses = await this.lookup(service, options);
        return addresses[0]; 
    }

    /**
     * 从查询结果中随机获取一个地址
     * 
     * @param {String} service 服务PSM
     * @param {Object} options 查询选项
     */
    async random(service, options) {
        const addresses = await this.lookup(service, options);
        const rand = Math.floor(addresses.length * Math.random());
        return addresses[rand]; 
    }

    /**
     * 查询服务地址
     * 
     * @param {String} service 服务PSM
     * @param {Object} options 查询选项
     */
    async lookup(service, options = {}) {
        options = Object.assign({}, {env: 'prod', cluster: 'default'}, options);
        
        const res = await request({
            method: 'GET',
            url: `http://${this.host}:${this.port}/v1/lookup/name?name=${service}`,
            json: true
        });

        if (!(res instanceof Array)) {
            throw new Error(`The response of consul lookup api is not an array, response: ${JSON.stringify(res)}`);
        }

        const addresses = res.map(address => ({
            host: address['Host'],
            port: address['Port'],
            tags: address['Tags']
        })).filter(address => {
            const tags = address.tags || {};
            if (tags.env && options.env !== '*' && options.env !== tags.env) {
                return false;
            }
            if (tags.cluster && options.cluster !== '*' && options.cluster !== tags.cluster) {
                return false;
            }
            return true;
        });

        if (addresses.length <= 0) {
            throw new Error(`Empty lookup result for service '${service}' with options '${JSON.stringify(options)}'`);
        }
        return addresses;
    }
}

class ServiceWatcher extends EventEmitter {
    constructor(options = {}) {
        super();
        this.interval = options.interval || 5000;
        this.consul = new Consul(options.consul);
        this.services = {};
        this.timer = 0;
    }

    /**
     * 获取服务地址列表
     * 
     * @param {String} service 服务PSM
     */
    async getAddresses(service) {
        const srv = this.services[service];
        if (!srv) {
            throw new Error(`Service '${service}' is not in watch list.`);
        }
        if (!srv.addressesPromise) {
            throw new Error(`You have to start to watch before calling this method.`);
        }
        const addresses = srv.addresses || await srv.addressesPromise;
        return addresses;
    }

    /**
     * 获取地址列表的第一个地址
     * 
     * @param {String} service 服务PSM
     */
    async getFirstAddress(service) {
        const addresses = await this.getAddresses(service);
        return addresses[0];
    }

    /**
     * 从地址列表中随机获取一个地址
     * 
     * @param {String} service 服务PSM
     */
    async getRandomAddress(service) {
        const addresses = await this.getAddresses(service);
        const rand = Math.floor(addresses.length * Math.random());
        return addresses[rand];
    }

    /**
     * 添加服务到观察列表
     * 
     * @param {String} service 服务PSM
     * @param {Object} options 服务Consul选项
     */
    addService(service, options) {
        this.services[service] = {
            options,
            addresses: null,
            addressesPromise: null
        };
        return this;
    }

    /**
     * 从观察列表移除服务
     * 
     * @param {String} service 服务PSM
     */
    removeService(service) {
        if (this.services[service]) {
            delete this.services[service];
        }
        return this;
    }

    /**
     * 开始观察服务地址变化
     */
    watch() {
        const services = this.services;
        const serviceNames = Object.keys(services);
        if (serviceNames.length <= 0) {
            throw new Error(`You have to add services to watcher before watching.`)
        }
        const promises = serviceNames.map(serviceName => {
            const service = services[serviceName];
            service.addressesPromise = this.consul.lookup(serviceName, service.options); 
            return service.addressesPromise;
        });
        
        Promise.all(promises).then(res => {
            res.forEach((addresses, index) => {
                const serviceName = serviceNames[index];
                if (!deepEqual(addresses, services[serviceName].addresses)) {
                    services[serviceName].addresses = addresses;
                    this.emit('update', serviceName, addresses);
                }
            });
            this.timer = setTimeout(() => this.watch(), this.interval);
        }).catch(e => {
            this.timer = setTimeout(() => this.watch(), this.interval);
        });
        return this;
    }

    /**
     * 停止观察服务地址变化
     */
    unwatch() {
        clearTimeout(this.timer);
        return this;
    }
}

Consul.ServiceWatcher = ServiceWatcher;

module.exports = Consul;