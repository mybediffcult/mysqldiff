/**
 * @author xiangshouding
 */

'use strict';

const kite = require('kitejs');
const {AddRequest, UpdateRequest, DelRequest, GetRequest} = require('./gen-nodejs/session_types');
const debug = require('debug')('session');
const crypto = require('crypto');

class Session {

    constructor(sessionKey, options) {
        if (Object.prototype.toString.call(sessionKey) == '[object Object]') {
            this.sessionKey = this.uuid();
            options = sessionKey;
        } else {
            this.sessionKey = sessionKey;
            options = options || {};
        }

        this.psm = options.psm || 'toutiao.passport.session';
        this.caller = options.caller;
        this.logId = options.logId;
        this.addr = options.addr;
        this.client = options.client;
        this.trafficEnv = options.trafficEnv;
        this.extra = options.extra;

        this.expire = options.expire || 10;
        // if given specail consul address, use it.
        this.consul = options.consul || null;
        // if global set Kite instance, use it.
        this.retry = options.retry || 5;
        this.kite = options.kite || null;
        this.logFile = options.logFile || __dirname + '/session.log';
    }

    provider (command, req) {
        var __this = this;
        return new Promise(function (resolve, reject) {
            if (!~['Get', 'Update', 'Del', 'Add'].indexOf(command)) {
                return reject(new Error(`not support command: ${command}`));
            }

            let callback = function (err, session, conn) {
                if (err) {
                    return reject(err);
                }

                session[command](req)
                    .then(response => {
                        if (response.BaseResp.StatusCode != 0) {
                            reject(new Error(response.BaseResp.StatusMessage));
                        } else {
                            resolve(response.SessionData);
                        }

                        conn.end();
                    })
                    .catch(err => {
                        reject(err);
                        conn.end();
                    });
            };

            return __this.getKite()
                .loadService(__dirname + '/gen-nodejs/SessionService')
                .request(callback);
        });
    }

    getKite() {
        return this.kite || new kite.Client({
            service: this.psm,
            searchHostType: 'CONSUL',
            protocol: 'THRIFT',
            consul: this.consul,
            retry: this.retry,
            log: {
                logFile: this.logFile
            }
        });
    }

    //get sessionKey, if Session in global context, it's very important.
    getSessionKey() {
        return this.sessionKey;
    }


    async get(key) {    
        let response;

        // Session v2 return error when key doesn't exist.
        try {
            response = await this.provider('Get', new GetRequest({
                SessionKey: this.sessionKey,
            }));
        } catch (err) {
            debug(err);
            return;
        }
        
        try {
            let sessionData = JSON.parse(response);

            if (typeof key !== 'string') {
                return sessionData;
            }

            return sessionData[key];
        } catch (err) {
            debug(`Get json parse failed, data = ${response}`);
            throw err;
        }
    }

    async set(key, data) {
        if (data === undefined || data === null) {
            data = '0';
        }

        var sessionData = await this.get();
        if (!sessionData) {
            if (typeof key === 'string') {
                sessionData = {};
                sessionData[key] = data;
            } else {
                sessionData = key;
            }

            return await this.provider('Add', new AddRequest(this.getReqData({
                SessionKey: this.sessionKey,
                SessionData: JSON.stringify(sessionData),
                Ttl: this.expire
            })));
        } else {
            if (typeof key === 'string') {
                if (data == null) {
                    delete sessionData[key];
                } else {
                    sessionData[key] = data;
                }
            } else {
                sessionData = key;
            }

            return await this.provider('Update', new UpdateRequest(this.getReqData({
                SessionKey: this.sessionKey,
                SessionData: JSON.stringify(sessionData),
                Ttl: this.expire
            })));
        }
    }

    async update(key, data) {
        return await set(key, data);
    }

    async del(key) {
        return await set(key, null);
    }

    async destroy() {
        await this.provider('Del', new DelRequest(this.getReqData({
            SessionKey: this.sessionKey
        })));
    }

    getReqData(data) {
        if (typeof data !== 'object') {
            data = {};
        }

        data['Caller'] = this.caller;
        data['LogID'] = this.logId;
        data['Addr'] = this.addr;
        data['client'] = this.client;
        data['TrafficEnv'] = this.trafficEnv;
        data['Extra'] = this.extra;

        return data;
    }

    uuid() {
        let uuid = require('uuid/v4')();
        let hash = crypto.createHash('md5')
            .update(uuid);
        return hash.digest('hex');
    }
}

module.exports = Session;
module.exports.session = function (sessionKey, options) {
    return new Session(sessionKey, options);
};
